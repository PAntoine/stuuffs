#line 1 "asn1_test.c"














#line 1 "g:\\projects\\work_in_progress\\test\\homeserver.h"
static unsigned char homeserver_cert_der[] = 
{
			0x30,0x82,0x03,0x38,0x30,0x82,0x02,0xA1,0xA0,0x03,0x02,0x01,0x02,0x02,0x01,0x01,
			0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x05,0x05,0x00,0x30,
			0x81,0xA1,0x31,0x0B,0x30,0x09,0x06,0x03,0x55,0x04,0x06,0x13,0x02,0x47,0x42,0x31,
			0x0F,0x30,0x0D,0x06,0x03,0x55,0x04,0x08,0x13,0x06,0x4C,0x6F,0x6E,0x64,0x6F,0x6E,
			0x31,0x1B,0x30,0x19,0x06,0x03,0x55,0x04,0x0A,0x13,0x12,0x70,0x65,0x74,0x65,0x72,
			0x61,0x6E,0x74,0x6F,0x69,0x6E,0x65,0x2E,0x6D,0x65,0x2E,0x75,0x6B,0x31,0x0E,0x30,
			0x0C,0x06,0x03,0x55,0x04,0x0B,0x13,0x05,0x63,0x65,0x72,0x74,0x73,0x31,0x2B,0x30,
			0x29,0x06,0x03,0x55,0x04,0x03,0x13,0x22,0x50,0x65,0x74,0x65,0x72,0x20,0x41,0x6E,
			0x74,0x6F,0x69,0x6E,0x65,0x20,0x28,0x70,0x65,0x74,0x65,0x72,0x61,0x6E,0x74,0x6F,
			0x69,0x6E,0x65,0x2E,0x6D,0x65,0x2E,0x75,0x6B,0x29,0x31,0x27,0x30,0x25,0x06,0x09,
			0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x09,0x01,0x16,0x18,0x63,0x65,0x72,0x74,0x73,
			0x40,0x70,0x65,0x74,0x65,0x72,0x61,0x6E,0x74,0x6F,0x69,0x6E,0x65,0x2E,0x6D,0x65,
			0x2E,0x75,0x6B,0x30,0x1E,0x17,0x0D,0x30,0x39,0x30,0x34,0x31,0x35,0x31,0x34,0x33,
			0x34,0x32,0x37,0x5A,0x17,0x0D,0x31,0x30,0x30,0x34,0x31,0x35,0x31,0x34,0x33,0x34,
			0x32,0x37,0x5A,0x30,0x81,0xA4,0x31,0x0B,0x30,0x09,0x06,0x03,0x55,0x04,0x06,0x13,
			0x02,0x47,0x42,0x31,0x0F,0x30,0x0D,0x06,0x03,0x55,0x04,0x08,0x13,0x06,0x4C,0x6F,
			0x6E,0x64,0x6F,0x6E,0x31,0x0F,0x30,0x0D,0x06,0x03,0x55,0x04,0x07,0x13,0x06,0x4C,
			0x6F,0x6E,0x64,0x6F,0x6E,0x31,0x1B,0x30,0x19,0x06,0x03,0x55,0x04,0x0A,0x13,0x12,
			0x70,0x65,0x74,0x65,0x72,0x61,0x6E,0x74,0x6F,0x69,0x6E,0x65,0x2E,0x6D,0x65,0x2E,
			0x75,0x6B,0x31,0x13,0x30,0x11,0x06,0x03,0x55,0x04,0x0B,0x13,0x0A,0x68,0x6F,0x6D,
			0x65,0x73,0x65,0x72,0x76,0x65,0x72,0x31,0x13,0x30,0x11,0x06,0x03,0x55,0x04,0x03,
			0x13,0x0A,0x68,0x6F,0x6D,0x65,0x73,0x65,0x72,0x76,0x65,0x72,0x31,0x2C,0x30,0x2A,
			0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x09,0x01,0x16,0x1D,0x68,0x6F,0x6D,
			0x65,0x73,0x65,0x72,0x76,0x65,0x72,0x40,0x70,0x65,0x74,0x65,0x72,0x61,0x6E,0x74,
			0x6F,0x69,0x6E,0x65,0x2E,0x6D,0x65,0x2E,0x75,0x6B,0x30,0x81,0x9F,0x30,0x0D,0x06,
			0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x01,0x05,0x00,0x03,0x81,0x8D,0x00,
			0x30,0x81,0x89,0x02,0x81,0x81,0x00,0xB2,0xFC,0x4C,0x5F,0x04,0x3E,0xFD,0x51,0x52,
			0x45,0xBC,0xDF,0x84,0x9D,0xCF,0xD8,0xC1,0x5C,0x76,0xA7,0xBF,0xA7,0x53,0xE0,0x8A,
			0x8D,0xDA,0x10,0xD1,0xF7,0x41,0x44,0xB0,0x7B,0x95,0x2B,0x81,0x23,0xEF,0xE6,0x99,
			0x3A,0x0F,0x21,0x0D,0x1C,0x94,0x1E,0x4B,0x2E,0xBF,0x3C,0x29,0x36,0x12,0x96,0x7E,
			0xE5,0xAD,0x3A,0x62,0x67,0x10,0x3E,0xCE,0x76,0xF7,0x9A,0x1A,0xC0,0x8D,0x26,0xB1,
			0x3E,0x59,0x81,0xEA,0xB1,0xA5,0xD1,0x3B,0x0D,0xE3,0x0E,0x53,0x1A,0x4B,0xDD,0x53,
			0x64,0x8A,0xD8,0xD2,0x51,0xEE,0xAB,0x2A,0xBA,0xAA,0xE6,0x67,0x1C,0xAA,0x59,0x53,
			0x34,0xC3,0x9C,0x67,0x75,0x7D,0x4B,0x67,0xF1,0x9F,0x9A,0x00,0x6A,0x0D,0x46,0x01,
			0x64,0xDC,0x3D,0xFC,0x98,0x6E,0x61,0x02,0x03,0x01,0x00,0x01,0xA3,0x7B,0x30,0x79,
			0x30,0x09,0x06,0x03,0x55,0x1D,0x13,0x04,0x02,0x30,0x00,0x30,0x2C,0x06,0x09,0x60,
			0x86,0x48,0x01,0x86,0xF8,0x42,0x01,0x0D,0x04,0x1F,0x16,0x1D,0x4F,0x70,0x65,0x6E,
			0x53,0x53,0x4C,0x20,0x47,0x65,0x6E,0x65,0x72,0x61,0x74,0x65,0x64,0x20,0x43,0x65,
			0x72,0x74,0x69,0x66,0x69,0x63,0x61,0x74,0x65,0x30,0x1D,0x06,0x03,0x55,0x1D,0x0E,
			0x04,0x16,0x04,0x14,0x4D,0x69,0x70,0x3A,0xFF,0x7E,0x3B,0x00,0xDA,0x11,0x2E,0x90,
			0x8B,0xA8,0x68,0x45,0x3E,0x84,0xBB,0x15,0x30,0x1F,0x06,0x03,0x55,0x1D,0x23,0x04,
			0x18,0x30,0x16,0x80,0x14,0x5A,0x4A,0x63,0xE8,0x94,0x52,0xD2,0x05,0x19,0x6F,0x4F,
			0x77,0x5A,0xFD,0xE0,0x1C,0xE9,0xA1,0xE1,0xBE,0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,
			0x86,0xF7,0x0D,0x01,0x01,0x05,0x05,0x00,0x03,0x81,0x81,0x00,0x11,0x56,0xA0,0xFF,
			0x09,0x7A,0xDB,0x47,0x01,0x07,0x5A,0xF4,0x85,0xE7,0x1F,0x64,0xBD,0x2C,0x01,0xA9,
			0x3C,0xDE,0x6E,0x2E,0x5F,0xA4,0xA4,0xA0,0xF2,0x86,0x74,0x25,0x56,0x8E,0xB2,0x62,
			0x17,0x10,0x26,0x35,0x4A,0x80,0x7E,0xF6,0xD7,0x56,0x87,0x62,0x82,0xD0,0x6A,0xE6,
			0xB6,0x83,0x2E,0x36,0x63,0xBD,0x25,0xFC,0x07,0x3F,0x3B,0x98,0x1D,0x94,0x12,0x40,
			0x28,0x99,0x95,0x2D,0x7B,0x70,0x94,0x68,0xD4,0x2C,0x08,0x47,0x8C,0x7C,0xF0,0xAF,
			0xE3,0x17,0x27,0xAD,0x17,0xD5,0x60,0xC1,0xA4,0xDB,0x2C,0x4E,0x1F,0xBF,0x0A,0x53,
			0xCB,0xB3,0xD6,0x6A,0x94,0xF6,0x31,0xC3,0xD7,0xD2,0x7A,0x64,0xB2,0x99,0x97,0x03,
			0xA1,0x8F,0xCF,0x01,0xC5,0xFB,0xFC,0x1A,0xD7,0x43,0xAC,0xA4
};

static unsigned int homeserver_cert_der_size = sizeof(homeserver_cert_der);

#line 16 "asn1_test.c"
#line 1 "g:\\projects\\work_in_progress\\test\\ASN1_decoder.h"





















typedef	struct
{
	unsigned char	*asn1_data;
	unsigned int	data_size;
	unsigned int	current_offset;
	unsigned int	element_size;
	unsigned char*	element_data;

} ASN1_STATUS;




typedef enum
{
	A1C_UNIVERSAL			= 0x00,
	A1C_APPLICATION			= 0x01,
	A1C_CONTEXT_SPECIFIC	= 0x02,
	A1C_PRIVATE				= 0x03

} ASN1_CLASS;

typedef enum
{
	A1T_PRIMITIVE  	= 0,
	A1T_CONSTRUCTED	= 1

} ASN1_PC_TYPE;

typedef	enum
{
	A1UC_NOT_USED				= 0,
	A1UC_BOOLEAN_TYPE			= 1,
	A1UC_INTEGER_TYPE			= 2,
	A1UC_BITSTRING_TYPE			= 3,
	A1UC_OCTETSTRING_TYPE		= 4,
	A1UC_NULL_TYPE				= 5,
	A1UC_OBJECT_IDENTIFIER_TYPE	= 6,
	A1UC_OBJECT_DESCRIPTOR_TYPE	= 7,
	A1UC_EXTERNAL_TYPE			= 8,
	A1UC_REAL_TYPE				= 9,
	A1UC_ENUMERATED_TYPE		= 10,
	A1UC_EMBEDDED_PDV_TYPE		= 11,
	A1UC_UTF8STRING_TYPE		= 12,
	A1UC_RELATIVE_OBJECT_TYPE	= 13,
	A1UC_SEQUENCE_TYPE			= 16,
	A1UC_SET_TYPE				= 17,
	A1UC_NUMERICSTRING_TYPE		= 18,
	A1UC_PRINTABLESTRING_TYPE	= 19,
	A1UC_TELETEXSTRING_TYPE 	= 20,
	A1UC_VIDEOTEXSTRING_TYPE	= 21,
	A1UC_IA5STRING_TYPE			= 22,
	A1UC_UTC_TIME_TYPE			= 23,
	A1UC_GENERALIZED_TIME_TYPE	= 24,
	A1UC_GRAPHICSTRING_TYPE		= 25,
	A1UC_VISIBLESTRING_TYPE 	= 26,
	A1UC_GENERALSTRING_TYPE		= 27,
	A1UC_UNIVERSALSTRING_TYPE	= 28,
	A1UC_BMPSTRING_TYPE			= 30

} ASN1_UNIVERSAL_CLASS;




typedef struct
{
	ASN1_PC_TYPE	type;
	ASN1_CLASS		asn1_class;
	unsigned long	tag;
	unsigned long	length;
	unsigned char	*data;
	unsigned long	offset;				

} ASN1_OBJECT;











unsigned int	ASN1_GetObject (unsigned char* source_data,ASN1_OBJECT* object);
unsigned int	ASN1_GetNextObject (ASN1_OBJECT* source_object, ASN1_OBJECT* sub_object);

#line 17 "asn1_test.c"
#line 1 "g:\\projects\\work_in_progress\\test\\X509_encoding.h"






















typedef	struct
{
	unsigned char	*asn1_data;
	unsigned int	data_size;
	unsigned int	current_offset;

} X509_STATUS;

typedef struct
{
	unsigned int	version;
	unsigned int	serial_number;




} X509_CERTIFICATE;







typedef	enum
{
	X5CPT_VERSION			= 0,
	X5CPT_ISSUER_UNIQUE		= 1,
	X5CPT_SUBJECT_UNIQUE	= 2,
	X5CPT_EXTENSION			= 3

} X509_CONTEXT_SPECIFIC_TAG;










typedef enum
{
	X520_ID_AT	= 4,
	X520_ID_CE	= 29		

} X520_TYPES;


typedef enum
{
	X520_ID_AT_NAME						= 41,
	X520_ID_AT_SURNAME					= 4,
	X520_ID_AT_GIVENNAME				= 42,
	X520_ID_AT_INITIALS					= 43,
	X520_ID_AT_GENERATIONQUALIFIER 		= 44,
	X520_ID_AT_COMMONNAME				= 3,
	X520_ID_AT_LOCALITYNAME				= 7,
	X520_ID_AT_STATEORPROVINCENAME 		= 8,
	X520_ID_AT_ORGANIZATIONNAME			= 10,
	X520_ID_AT_ORGANIZATIONALUNITNAME 	= 11,
	X520_ID_AT_TITLE					= 12,
	X520_ID_AT_DNQUALIFIER				= 46,
	X520_ID_AT_COUNTRYNAME				= 6,
	X520_ID_AT_SERIALNUMBER				= 5,
	X520_ID_AT_PSEUDONYM				= 65

} X520_ID_AT_FIELDS;


typedef enum
{
	X520_ID_CE_AUTHORITYKEYIDENTIFIER		= 35,
	X520_ID_CE_SUBJECTKEYIDENTIFIER			= 14,
	X520_ID_CE_KEYUSAGE						= 15,
	X520_ID_CE_PRIVATEKEYUSAGEPERIOD		= 16,
	X520_ID_CE_CERTIFICATEPOLICIES			= 32,
	X520_ID_CE_POLICYMAPPINGS				= 33,
	X520_ID_CE_SUBJECTALTNAME				= 17,
	X520_ID_CE_ISSUERALTNAME				= 18,
	X520_ID_CE_SUBJECTDIRECTORYATTRIBUTES 	= 9 ,
	X520_ID_CE_BASICCONSTRAINTS				= 19,
	X520_ID_CE_NAMECONSTRAINTS				= 30,
	X520_ID_CE_POLICYCONSTRAINTS			= 36,
	X520_ID_CE_CRLDISTRIBUTIONPOINTS     	= 31,
	X520_ID_CE_EXTKEYUSAGE 					= 37,
	X520_ID_CE_INHIBITANYPOLICY				= 54,
	X520_ID_CE_FRESHESTCRL					= 46,
	X520_ID_CE_CRLNUMBER					= 20,
	X520_ID_CE_ISSUINGDISTRIBUTIONPOINT		= 28,
	X520_ID_CE_DELTACRLINDICATOR			= 27,
	X520_ID_CE_CRLREASONS					= 21,
	X520_ID_CE_CERTIFICATEISSUER			= 29,
	X520_ID_CE_HOLDINSTRUCTIONCODE			= 23,
	X520_ID_CE_INVALIDITYDATE				= 24

} X520_ID_CE_FIELDS;






const unsigned char	id_pkix[] = {0x2b,0x06,0x01,0x05,0x05,0x07};

typedef	enum
{
	PKIX_ID_PE	= 1,
	PKIX_ID_QT	= 2,
	PKIX_ID_KP	= 3,
	PKIX_ID_AD	= 48	
} PKIX_OBJECTS;

typedef enum
{
	PKIX_ID_AD_OCSP				= 1,
	PKIX_ID_AD_CAISSUERS		= 2,
	PKIX_ID_AD_TIMESTAMPING		= 3,
	PKIX_ID_AD_CAREPOSITORY		= 5
} PKIX_IS_AD_OBJECTS;

typedef enum
{
	PKIX_ID_KP_SERVERAUTH		= 1,
	PKIX_ID_KP_CLIENTAUTH		= 2,
	PKIX_ID_KP_CODESIGNING		= 3,
	PKIX_ID_KP_EMAILPROTECTION	= 4,
	PKIX_ID_KP_TIMESTAMPING		= 8,
	PKIX_ID_KP_OCSPSIGNING		= 9
} PKIX_IS_KP_OBJECTS;

typedef enum
{
	PKIX_ID_PE_AUTHORITYINFOACCESS	= 1,
	PKIX_ID_PE_SUBJECTINFOACCESS 	= 11
} PKIX_ID_PE_OBJECTS;

typedef enum
{
	PKIX_ID_QT_CPS		= 1,
	PKIX_ID_QT_UNOTICE	= 2
} PKIX_ID_QT_OBJECTS;








const unsigned char	id_pkcs[] = {0x2a,0x86,0x48,0x86,0xf7,0x0d,0x01};


typedef enum
{
	PKCS1_RSA_ENCRYPTION		= 1,
	PKCS1_RSA_MD2_SIGNATURE		= 2,
	PKCS1_RSA_MD5_SIGNATURE		= 4,
	PKCS1_RSA_SHA1_SIGNATURE	= 5

} PKCS_1_ID_OBJECTS;



typedef enum
{
	PKCS9_EMAIL_ADDRESS			= 1		

} PKCS_1_ID_OBJECTS;






const unsigned char id_domainComponent[] 	= {0x09,0x92,0x26,0x89,0x93,0xf2,0x2c,0x64,0x01,0x19};
const unsigned char holdInstruction[]		= {0x52,0x86,0x48,0xce,0x38,0x02};

typedef enum
{
	ID_HOLDINSTR_NONE		= 1,	
	ID_HOLDINSTR_CALLUSER	= 2,
	ID_HOLDINSTR_REJECT		= 3
} ID_HOLDINSTR_OBJECTS;





#line 18 "asn1_test.c"

char*	class_str[] = {
						"UNIVERSAL",
						"APPLICATION",
						"CONTEXT_SPECIFIC",
						"PRIVATE"
};

char*	universal_str[] = {
						"NOT_USED",
						"BOOLEAN_TYPE",
						"INTEGER_TYPE",
						"BITSTRING_TYPE",
						"OCTETSTRING_TYPE",
						"NULL_TYPE",
						"OBJECT_IDENTIFIER_TYPE",
						"OBJECT_DESCRIPTOR_TYPE",
						"EXTERNAL_TYPE",
						"REAL_TYPE",
						"ENUMERATED_TYPE",
						"EMBEDDED_PDV_TYPE",
						"UTF8STRING_TYPE",
						"RELATIVE_OBJECT_TYPE",
						"NOT USED 14",
						"NOT USED 15",
						"SEQUENCE_TYPE",
						"SET_TYPE",
						"NUMERICSTRING_TYPE",
						"PRINTABLESTRING_TYPE",
						"TELETEXSTRING_TYPE ",
						"VIDEOTEXSTRING_TYPE",
						"IA5STRING_TYPE",
						"UTC_TIME_TYPE",
						"GENERALIZED_TIME_TYPE",
						"GRAPHICSTRING_TYPE",
						"VISIBLESTRING_TYPE ",
						"GENERALSTRING_TYPE",
						"UNIVERSALSTRING_TYPE",
						"BMPSTRING_TYPE"
};

void	hexDump ( const unsigned char* memory, unsigned int dumpSize)
{
	static char	HexBit[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

	int			nibble,count,count2,count3,count4;
	char		line[81];

	line[80] = '\0';

	memset(line,' ',0);

	
	printf("             Hex Dump                                          Characters      \n");
	printf("             ------------------------------------------------  ----------------\n");

	
	memset(line,' ',80);
	
	
	for (count=0;count < dumpSize;count+=16)
	{











		for(count2=count,count3=13,count4=63;count2 < count+16 && count2 < dumpSize;count2++,count3+=3,count4++)
		{
			
			line[count3] = HexBit[((memory[count2]&0xf0)>>4)];
			line[count3+1] = HexBit[(memory[count2]&0x0f)];
			line[count3+2] = ' ';

			
			if (!isprint(memory[count2]))
				line[count4] = '.';
			else
				line[count4] = (char) memory[count2];
		}

		if (count2 < count+16)
		{
			for(;count2<count+16;count2++,count3+=3,count4++)
			{
				line[count3] = ' ';
				line[count3+1] = ' ';
				line[count3+2] = ' ';

				line[count4] = ' ';
			}
		}

		line[79] = '\n';
		printf("%s",line);
	}
}



void main()
{
	ASN1_OBJECT		container;
	ASN1_OBJECT		tbsCert;
	ASN1_OBJECT		signature_algo;
	ASN1_OBJECT		signature;
	ASN1_OBJECT		object;
	unsigned long	tag;
	ASN1_CLASS 		class;
	ASN1_PC_TYPE 	type;
	unsigned long	length;

	unsigned int	a,x,y,z;

	if ((a = ASN1_GetObject(homeserver_cert_der,&container)))
	{
		if (container.type == A1T_CONSTRUCTED && container.asn1_class == A1C_UNIVERSAL)
		{
			if (ASN1_GetNextObject(&container,&tbsCert))
			{
				if (container.type == A1T_CONSTRUCTED && container.asn1_class == A1C_UNIVERSAL)
				{
					
					if (ASN1_GetNextObject(&tbsCert,&object) && ((object.type == A1T_CONSTRUCTED) && (object.asn1_class == A1C_CONTEXT_SPECIFIC) && (object.type == 0)) )
					{

						printf("cert header\n");


					}




						


						printf("cert: Type %c Length: %04d class %s uni: %s\n",object.type?'C':'P',object.length,class_str[object.asn1_class],universal_str[object.tag]);
				}
			}

			y = ASN1_GetNextObject(&container,&signature_algo);
			z = ASN1_GetNextObject(&container,&signature);

			printf("length: %d %d\n",container.length,a);
			printf("yes: x: %d y: %d z: %d\n",x,y,z);
			printf("algo: Type %c Length: %04d class %s uni: %s\n",signature_algo.type?'C':'P',signature_algo.length,class_str[signature_algo.asn1_class],universal_str[signature_algo.tag]);
			printf("sig : Type %c Length: %04d class %s uni: %s\n",signature.type?'C':'P',signature.length,class_str[signature.asn1_class],universal_str[signature.tag]);
		}


















































	}
}



